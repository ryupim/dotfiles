# author: ryupim
# .zshrc_Mac

# -----------------------------
# Lang
# -----------------------------
# 日本語を使用
export LANG=en_US.UTF-8


# -----------------------------
# General
# -----------------------------
# 色を使用
autoload -Uz colors ; colors
# エディタをvimに確定
export EDITOR=vim
# Ctrl+Dでログアウトしてしまうことを防ぐ
setopt IGNOREEOF
# 自動でpushdを実行
setopt auto_pushd
# pushdから重複を削除
setopt pushd_ignore_dups
# beepを無効にする
setopt no_beep
# tmux上でCtrl-AとCtrl-Eを有効にする
bindkey -e


# -----------------------------
# Prompt
# -----------------------------
# 構文一覧
# %M, %m    ホスト名
# %d    カレントディレクトリ(フルパス)
# %~    カレントディレクトリ(フルパス2)
# %C    カレントディレクトリ(相対パス)
# %c    カレントディレクトリ(相対パス)
# %n    ユーザ名
# %#    ユーザ種別
# %?    直前のコマンドの戻り値
# %D    日付(yy-mm-dd)
# %W    日付(yy/mm/dd)
# %w    日付(day dd)
# %*    時間(hh:flag_mm:ss)
# %T    時間(hh:mm)
# %t    時間(hh:mm(am/pm))
# %F,%f     %F, %f間で{}内の色を適用
# %B,%b     %B, %b間でboldを適用
#PROMPT="%(?.%{${fg[green]}%}.%{${fg[red]}%})%n${reset_color}${reset_color}(%T%) %1~%# "

function left-prompt {
  name_t='255m%}'      # user name text clolr
  name_b='099m%}'    # user name background color
  path_t='255m%}'     # path text clolr
  path_b='031m%}'   # path background color
  arrow='087m%}'   # arrow color
  text_color='%{\e[38;5;'    # set text color
  back_color='%{\e[30;48;5;' # set background color
  reset='%{\e[0m%}'   # reset
  sharp="\uE0B0"      # triangle

  user="${back_color}${name_b}${text_color}${name_t}"
  dir="${back_color}${path_b}${text_color}${path_t}"
  echo "[%T] %B${user}%n@%m${back_color}${path_b}${text_color}${name_b}${sharp} ${dir}%c${reset}${text_color}${path_b}${sharp}%b${reset}\n${text_color}${arrow}> ${reset}"
#PROMPT="%B%F{green}❯❯%f%b [%T]%B%F{green}%1(v|%1v|)%f%b  %B%F{blue}%~%f%b
}

PROMPT=`left-prompt`

# コマンドの実行ごとに改行
function precmd() {
  # Print a newline before the prompt, unless it's the
  # first prompt in the process.
  if [ -z "$NEW_LINE_BEFORE_PROMPT" ]; then
      NEW_LINE_BEFORE_PROMPT=1
  elif [ "$NEW_LINE_BEFORE_PROMPT" -eq 1 ]; then
      echo ""
  fi
}

# git ブランチ名を色付きで表示させるメソッド
function rprompt-git-current-branch {
  local branch_name st branch_status

  branch='\ue0a0'
  color='%{\e[38;5;' #  文字色を設定
  green='114m%}'
  red='001m%}'
  yellow='227m%}'
  blue='033m%}'
  reset='%{\e[0m%}'   # reset

  color='%{\e[38;5;' #  文字色を設定
  green='114m%}'

  # ブランチマーク
  if [ ! -e  ".git" ]; then
    # git 管理されていないディレクトリは何も返さない
    return
  fi
    branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
    st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    # 全て commit されてクリーンな状態
    branch_status="${color}${green}${branch}"
  elif [[ -n `echo "$st" | grep "^Untracked files"` ]]; then
    # git 管理されていないファイルがある状態
    branch_status="${color}${red}${branch}?"
  elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
    # git add されていないファイルがある状態
    branch_status="${color}${red}${branch}+"
  elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
    # git commit されていないファイルがある状態
    branch_status="${color}${yellow}${branch}!"
  elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
    # コンフリクトが起こった状態
    echo "${color}${red}${branch}!(no branch)${reset}"
    return
  else
    # 上記以外の状態の場合
    branch_status="${color}${blue}${branch}"
  fi

  # ブランチ名を色付きで表示する
  echo "${branch_status}$branch_name${reset}"
}

# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
setopt prompt_subst

# プロンプトの右側にメソッドの結果を表示させる
RPROMPT='`rprompt-git-current-branch`'

# kube-ps1
source "/usr/local/opt/kube-ps1/share/kube-ps1.sh"
PS1='$(kube_ps1)'$PS1



# -----------------------------
# Completion
# -----------------------------
# 補完
autoload -Uz compinit ; compinit
# 補完候補を ←↓↑→ でも選択
zstyle ':completion:*' menu select=2
# 補完候補を詰めて表示
setopt list_packed
# ディレクトリ選択時、最後の/を残す。
setopt noautoremoveslash
# 補完候補一覧でファイルの種別を識別マーク表示(ls -F の記号)
setopt list_types
# 補完時の色設定
# fi : 普通のファイル(file)
# di : ディレクトリ(directory)
# ln : シンボリックリンク(symbolic link)
# pi : パイプ(pipe)
# so : ソケット(socket)
# bd : block device driver
# cd : character device driver
# or : orphaned syminks
# ex : 実行ファイル(実行権限がついたファイル)
# 色参照
# https://www.fulldigit.co.jp/server_env/ls_colors.html
export LS_COLORS='di=01;32:ln=01;35:so=01;33:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
# キャッシュの利用による補完の高速化
zstyle ':completion::complete:*' use-cache true
# 補完候補に色つける
if [ -n "$LS_COLORS" ]; then
      zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
fi
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# 大文字・小文字を区別しない(大文字を入力した場合は区別する)
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# manの補完をセクション番号別に表示させる
zstyle ':completion:*:manuals' separate-sections true
# --prefix=/usr などの = 以降でも補完
setopt magic_equal_subst
# hubコマンド 自動補完設定
fpath=(~/.zsh/completions $fpath) 
autoload -U compinit && compinit
# ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash
# kubectl completion
source <(kubectl completion zsh)

# -----------------------------
# History
# -----------------------------
# ヒストリーに重複を表示しない
setopt histignorealldups
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
# 他のターミナルとヒストリーを共有
setopt share_history
# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks
# 履歴をすぐに追加する
setopt inc_append_history
# ヒストリを呼び出してから実行する間に一旦編集できる状態になる
setopt hist_verify


## cdr, add-zsh-hook を有効化
# http://wada811.blogspot.com/2014/09/zsh-cdr.html
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# cdr の設定
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-file "$HOME/.cache/shell/chpwd-recent-dirs"
zstyle ':chpwd:*' recent-dirs-pushd true


# -----------------------------
# Alias
# -----------------------------
# Grobal Alias
alias -g L='| less'
alias -g H='| head'
alias -g G='| grep'
alias -g GI='| grep -ri'
# Local Alias
alias ls='exa'
alias ll='ls -lF'
alias lla='ls -alF'
alias la='ls -a'
alias so='source'
alias sz='source ~/.zshrc'
alias vi='vim'
alias vz='vim ~/.zshrc'
alias vzu='vim ~/Work/dotfiles/.zsh/.zshrc_Ubuntu'
alias vzm='vim ~/Work/dotfiles/.zsh/.zshrc_Mac'
alias vv='vim ~/.vimrc'
alias cdr='cdr -l'
alias h='fc -lt '%f %t' 1'      # show date in history
alias cp='cp -i'
alias rm='rm -i'
alias mv='mv -i'
alias mkdir='mkdir -p'
alias ..='c ../'
alias back='pushd'
alias diff='diff -U1'
alias tree='tree -N'
alias co='code .'
alias k='kubectl'
alias py='python'
alias jupy='jupyter-notebook'
# git command
alias gi='git init'
alias ga='git add .'
alias gc='git commit -m'
alias gb='git branch'
alias gph='git push'
alias gpl='git pull'
# cargo commnad
alias cnew='cargo new'
alias cadd='cargo add'
alias crun='cargo run'
alias cbuild='cargo build'
alias catest='cargo test'
# edit documents
alias todo='vim ~/Documents/todo/todo.md'
alias today='vim ~/Documents/todo/today-todo.md'
alias often='vim ~/Documents/todo/often-words.md'
# exclusive mac
alias ctags="`brew --prefix`/bin/ctags"


# -----------------------------
# My Function
# -----------------------------
function memo() {
    mkdir -p ~/memo
    cd ~/memo
    filename=`date "+%Y-%m-%d-Memo.md"`
    if [ ! -f $filename ];then
      date "+# %Y-%m-%d-Memo" > $filename
    fi
    vim $filename
    cd -
}

function backcp() {
    cp -p $1 .backup_$1.`date "+%Y%m%d_%H%M%S"`
}

# mkdirとcdを同時実行
function mkcd() {
  if [[ -d $1 ]]; then
    echo "$1 already exists!"
    cd $1
  else
    mkdir -p $1 && cd $1
  fi
}

# ^\でexit 
function _exit_terminal() {
  exit
}
zle -N exit_terminal _exit_terminal
bindkey '^\' exit_terminal

# Ctrl-G, Ctrl-Sを間髪入れずに入力 -> "git status"が実行される
function _git_status() {
  if [ $(git rev-parse --is-inside-work-tree) = 'true' ]; then
      echo "git status -sb" # git statusを実行したっぽくみせかける
      git status -sb
  else
      echo "Current repository is not a git repository"
  fi
  zle reset-prompt
  echo '\n'
}
zle -N git_status _git_status
bindkey '^G^G' git_status

function _git_log() {
  if [ $(git rev-parse --is-inside-work-tree) = 'true' ]; then
    echo "git log --oneline" 
    git log --oneline
  else
      echo "Current repository is not a git repository"
  fi
  zle reset-prompt
  echo '\n'
}
zle -N git_log _git_log  
bindkey '^G^L' git_log

function _git_diff() {
  if [ $(git rev-parse --is-inside-work-tree) = 'true' ]; then
    echo "git diff" 
    git diff
  else
      echo "Current repository is not a git repository"
  fi
  zle reset-prompt
  echo '\n'
}
zle -N git_diff _git_diff
bindkey '^G^D' git_diff

function _git_branch() {
  if [ $(git rev-parse --is-inside-work-tree) = 'true' ]; then
    echo "git branch -a" 
    git branch -a
  else
      echo "Current repository is not a git repository"
  fi
  zle reset-prompt
  echo '\n'
}
zle -N git_branch _git_branch
bindkey '^G^B' git_branch


# timeコマンド 表記変更
TIMEFMT=$'\n\n========================\nProgram : %J\nCPU     : %P\nuser    : %*Us\nsystem  : %*Ss\ntotal   : %*Es\n========================\n'


# -----------------------------
# PATH Env
# -----------------------------

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init --path)"
fi

# cargo
export PATH=$HOME/.cargo/bin:$PATH

# krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# npm
export PATH=$PATH:./node_modules/.bin

# openssl
export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"

# Wasmer
export WASMER_DIR="/home/softbank/.wasmer"
[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"
